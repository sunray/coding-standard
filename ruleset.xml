<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>
<ruleset name="Sunray">
    <description>Sunray PHP Coding Standards</description>

    <!-- Include the Slevomat coding standard path -->
    <config name="installed_paths" value="../../slevomat/coding-standard"/>

    <!-- Include the whole PSR-2 standard: http://www.php-fig.org/psr/psr-2/ -->
    <!-- Referenced Sniffs: https://github.com/squizlabs/PHP_CodeSniffer/blob/master/src/Standards/PSR2/ruleset.xml -->
    <rule ref="PSR2" />

    <!-- The following sniffs are those that DO NOT exist in the base PSR2 set of sniffs -->

    <!--
    ####################################################################################################################
    ### Generic
    ###
    ### Reference: https://github.com/squizlabs/PHP_CodeSniffer/tree/master/src/Standards/Generic/Sniffs
    ####################################################################################################################
    -->

    <!-- Requires short array syntax, i.e. [] instead of array() -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax" />

    <!-- Prevent variable assignments being made within conditions. i.e. while(($i = $i - 1)) -->
    <rule ref="Generic.CodeAnalysis.AssignmentInCondition"/>

    <!-- Detects empty statements. We ONLY allow empty try/catch statements which can exist with a
         comment as enforced by the "Squiz.Commenting.EmptyCatchComment.*" sniffs. All other statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <!--
        Allow only the CATCH statement to be empty WITH comments. All other statements
        (DO, ELSE, ELSEIF, FOR, FOREACH, IF, SWITCH, TRY) are not allowed to be empty even
        with a comment.
        -->
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCATCH" />
    </rule>

    <!-- Detects the usage of one and the same incrementer into an outer and an inner
         loop. Even it is intended this is confusing code. -->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer" />

    <!-- Detects unnecessary final modifiers inside of final classes.-->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />

    <!-- Detects unnecessary overriden methods that simply call their parent. e.g.
        <code>
            class Foo extends Bar {
                public function __construct($a, $b) {
                    parent::__construct($a, $b);
                }
            }
        </code>
    -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />

    <!-- Forbid statements on the same line:
        echo 'test'; echo 'test2';
    -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements" />

    <!-- Requires a space after typecasting, e.g. `(int) "4"` -->
    <rule ref="Generic.Formatting.SpaceAfterCast" />

    <!-- Checks the nesting level for methods. Default warning level = 5 -->
    <rule ref="Generic.Metrics.NestingLevel" />

    <!-- Requires camel-caps naming for functions -->
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName">
        <properties>
            <!-- Allow things like `setDI()` where there are two capitals next to each other -->
            <property name="strict" value="false" />
        </properties>
    </rule>

    <!-- Requires PHP5-style class constructors:
        class MyClass {
            public function MyClass()     // bad
            public function __construct() // good
        }
    -->
    <rule ref="Generic.NamingConventions.ConstructorName" />

    <!-- Ensures that constant names are all uppercase. -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName" />

    <!-- Forbids pointless string concatenations, e.g. "foo"."bar" -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <!-- In order to adhere to line length limits there are cases where strings must be broken
                 up across lines. This prevents this error from triggering. -->
            <property name="allowMultiline" value="true" />
        </properties>
    </rule>

    <!--
    ####################################################################################################################
    ### Squiz
    ####################################################################################################################
    -->

    <!-- Tests that the stars in a doc comment align correctly. For example:
        /**
          *     // Invalid (One extra space)
         */
    -->
    <rule ref="Squiz.Commenting.DocCommentAlignment" />

    <!-- Checks for empty catch clause without a comment. -->
    <rule ref="Squiz.Commenting.EmptyCatchComment" />

    <!-- A Sniff to enforce the use of IDENTICAL type operators rather than EQUAL operators. -->
    <rule ref="Squiz.Operators.ComparisonOperatorUsage">
        <!-- Ensure we allow implicit TRUE operations. e.g. `if ($a)` -->
        <exclude name="Squiz.Operators.ComparisonOperatorUsage.ImplicitTrue" />
    </rule>

    <!-- Verifies that class members have scope modifiers. -->
    <rule ref="Squiz.Scope.MemberVarScope" />

    <!-- Verifies that class methods have scope modifiers. -->
    <rule ref="Squiz.Scope.MethodScope" />

    <!-- Checks for usage of $this in static methods, which will cause runtime errors. -->
    <rule ref="Squiz.Scope.StaticThisUsage" />

    <!-- Makes sure there are no spaces around the concatenation operator. Ignore multiline
         concatenations without any specific requirement on this sniff in terms of concatenation
         operator location. This allows for other sniffs to handle multiline padding -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1" />
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>

    <!-- Makes sure that any use of double quotes strings are warranted. -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage" />

    <!-- Forbids whitespace in typecasts:
        (int) $stringInt;   // good
        ( int ) $stringInt; // bad
    -->
    <rule ref="Squiz.WhiteSpace.CastSpacing" />

    <!-- Checks that control structures have the correct spacing around brackets:
        if ( false )    // good
        if (false)      // bad
    -->
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing" />

    <!-- Checks that there is no empty line after the opening brace of a function.
        function testAction()
        {                           // good
        function testAction()
        {                           // bad
        function testAction() {     // bad
    -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace" />

    <!-- Ensures all language constructs contain a single space between themselves and their content.:
        echo 'test';    // good
        echo'test';     // bad
    -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing" />

    <!-- Requires whitespace around logical operators:
        if (this && that) // good
        if (this&&that)   // bad
    -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing" />

    <!-- Ensure there is no whitespace before/after an object operator. Allow multi-line object operators.
        $test->a = '3';     // good
        $test -> a = '3';   // bad
    -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>

    <!-- Verifies that operators have valid spacing surrounding them. Ensure that we allow additional space
         when testing operators that encompass multiple lines:
        $sz += '3';();      // good
        $sz +='3';();       // bad
    -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>

    <!-- Ensures that a property or label colon has a single space after it and no space before it.
        switch (true) {
            case 1:         // good
                break;
            case 2 :        // bad
                break;
        }
    -->
    <rule ref="Squiz.WhiteSpace.PropertyLabelSpacing" />

    <!-- Checks that the closing braces of scopes are aligned correctly. -->
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace" />

    <!-- Ensure there is a single space after scope keywords. -->
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing" />

    <!-- Forbids whitespace before semicolons:
        doStuff();      // good
        doStuff() ;     // bad
    -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing" />

    <!--
    ####################################################################################################################
    ### Zend
    ####################################################################################################################
    -->

    <!--
    ####################################################################################################################
    ### Slevomat
    ###
    ### Reference: https://github.com/slevomat/coding-standard/tree/master/SlevomatCodingStandard/Sniffs
    ####################################################################################################################
    -->

    <!-- Ensure commas after last element in an array make adding a new element easier and result in a cleaner
         versioning diff. This sniff enforces trailing commas in multi-line arrays and requires short array
         syntax []. -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma" />

    <!-- In PHP 7.1 it's possible to declare visibility of class constants. In a similar vein to optional declaration
         of visibility for properties and methods which is actually required in sane coding standards, this sniff
         also requires declaring visibility for all class constants. -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility" />

    <!-- Finds potential dead code -->
    <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements" />

    <!-- Reports forbidden annotations.
        @author, @created, @version - we have version control systems
        @package - we have namespaces
        @copyright, @license - it's not necessary to repeat licensing information in each file
        @throws - it's not possible to enforce this annotation and the information can become outdated
    -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array" value="author,created,version,package,copyright,license"/>
        </properties>
    </rule>

    <!-- Reports invalid format of inline phpDocs with @var. -->
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration" />

    <!-- Yoda conditions decrease code comprehensibility and readability by switching operands around comparison
         operators forcing the reader to read the code in an unnatural way. -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison" />

    <!-- In PHP 7.0, a Throwable interface was added that allows catching and handling errors in more cases than
         Exception previously allowed. So, if the catch statement contained Exception on PHP 5.x, it means it should
         probably be rewritten to reference Throwable on PHP 7.x. This sniff enforces that. -->
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly" />

    <!-- Checks whether uses at the top of a file are alphabetically sorted. Follows natural sorting and takes
         edge cases with special symbols into consideration. -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses" />

    <!-- Group use declarations are ugly, make diffs ugly and this sniff prohibits them. -->
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse" />

    <!-- Prohibits multiple uses separated by commas. i.e. use Foo, Bar; -->
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine" />

    <!-- Prohibits unused imports from other namespaces. -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses" />

    <!-- Disallows leading backslash in use statement: e.g. use \Foo\Bar;  -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash" />

    <!-- Prohibits uses from the same namespace -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />

    <!-- Enforces having declare(strict_types = 1) at the top of each PHP file. -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="1" />
            <property name="spacesCountAroundEqualsSign" value="1" />
        </properties>
    </rule>

    <!-- Enforces using shorthand scalar typehint variants in phpDocs: int instead of
         integer and bool instead of boolean. This is for consistency with native scalar typehints
         which also allow shorthand variants only. Note that this check is specific to docblock
         or annotations only (and not PHP type hints). -->
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints" />

    <!-- Checks whether the nullablity ? symbol is present before each nullable and optional parameter
         (which are marked as = null):
        <code>
            function foo(
                int $foo = null, // ? missing
                ?int $bar = null // correct
            ) {}
        </code>
    -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue" />

    <!--
        1. Checks that there's a single space between a typehint and a parameter name: Foo $foo
        2. Checks that there's no whitespace between a nullability symbol and a typehint: ?Foo
    -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing" />

    <!-- Enforces consistent formatting of return typehints: e.g. function foo(): ?int -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing" />

    <!-- Enforces one configurable number of lines after opening class/interface/trait brace and one empty
         line before the closing brace. Similar to the other Squiz.Whitespace with a few additional checks -->
    <rule ref="SlevomatCodingStandard.Types.EmptyLinesAroundTypeBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0"/>
            <property name="linesCountBeforeClosingBrace" value="0"/>
        </properties>
    </rule>

</ruleset>
